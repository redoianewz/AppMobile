{/* {cart.map((cartItem, cartIndex) => (
          <View key={cartIndex} style={styles.cartItemContainer}>
            {cartItem.items &&
              cartItem.items.map((item, itemIndex) => (
                <View key={itemIndex} style={styles.productContainer}>
                  <Image
                    source={{
                      uri: `https://bachen-eco.onrender.com/images/products/${item.image}`,
                    }}
                    style={styles.productImage}
                  />
                  <View style={styles.productDetails}>
                    <Text style={styles.productName}>{item.name}</Text>
                    <Text style={styles.productPrice}>
                      {item.price}dh - {item.regular_price}dh
                    </Text>
                    {item.attributes.map((attr, index) => (
                      <Text key={index} style={styles.productAttributes}>
                        {attr.name} : {attr.values}
                      </Text>
                    ))}
                  </View>
                  <View style={styles.quantityAndActions}>
                    <TouchableOpacity
                      onPress={() => decrementQuantity(cartIndex, itemIndex)}
                    >
                      <Text style={styles.quantityControl}> - </Text>
                    </TouchableOpacity>
                    <TextInput
                      style={styles.quantityInput}
                      value={item.quantity.toString()}
                      editable={false}
                    />
                    <TouchableOpacity
                      onPress={() => incrementQuantity(cartIndex, itemIndex)}
                    >
                      <Text style={styles.quantityControl}> + </Text>
                    </TouchableOpacity>
                  </View>
                  <TouchableOpacity
                    onPress={() => resetQuantityToOne(cartIndex, itemIndex)}
                  >
                    <Text style={styles.resetQuantity}>
                      <FontAwesome
                        name="rotate-left"
                        size={20}
                        color="orange"
                      />
                    </Text>
                  </TouchableOpacity>
                  <TouchableOpacity onPress={() => handleDelete(item.item_id)}>
                    <FontAwesome name="trash" size={20} color="orange" />
                  </TouchableOpacity>
                </View>
              ))}
          </View>
        ))} */}
        -----------------
        import { NavigationContainer } from "@react-navigation/native";
import { createMaterialBottomTabNavigator } from "@react-navigation/material-bottom-tabs";
import { createStackNavigator } from "@react-navigation/stack";
import Home from "./components/Home";
import Category from "./components/Category";
import Feed from "./components/Feed";
import Login from "./components/Login";
import Aide from "./components/Aide";
import CustomTabBarIcon from "./navigation/CustpmTabBarIcon";
import HeadrBar from "./components/HeadrBar";
import Cart from "./components/Cart";
import Wishlist from './components/Wishlist';
import ProductDetails from './components/ProductDetails';
import "react-native-get-random-values";
import LottieView from "lottie-react-native";
import React, { useState, useEffect } from "react";
import { ActivityIndicator, View,Image } from "react-native";
import AutocompleteSearchBar from "./components/AutocompleteSearchBar";
import { TextInput, TouchableOpacity,useBarStyle} from "react-native-gesture-handler";
import { FontAwesome } from "@expo/vector-icons";




const BottomTab = createMaterialBottomTabNavigator();
const Stack = createStackNavigator();

const MainTabNavigator = () => (
  <BottomTab.Navigator>
    <BottomTab.Screen
      name="Home"
      component={Home}
      options={{
        tabBarIcon: ({ focused }) => (
          <CustomTabBarIcon
            name="home"
            size={24}
            color="#748c94"
            focused={focused}
          />
        ),
      }}
    />
    <BottomTab.Screen
      name="Category"
      component={Category}
      options={{
        tabBarIcon: ({ focused }) => (
          <CustomTabBarIcon
            name="apps"
            size={24}
            color="#748c94"
            focused={focused}
          />
        ),
      }}
    />
    <BottomTab.Screen
      name="order"
      component={Feed}
      options={{
        tabBarIcon: ({ focused }) => (
          <CustomTabBarIcon
            name="order-bool-descending-variant"
            size={24}
            color="#748c94"
            focused={focused}
          ></CustomTabBarIcon>
        ),
      }}
    />
    <BottomTab.Screen
      name="Login"
      component={Login}
      options={{
        tabBarIcon: ({ focused }) => (
          <CustomTabBarIcon
            name="login"
            size={24}
            color="#748c94"
            focused={focused}
          ></CustomTabBarIcon>
        ),
      }}
    />
    <BottomTab.Screen
      name="Aide"
      component={Aide}
      options={{
        tabBarIcon: ({ focused }) => (
          <CustomTabBarIcon
            name="help-circle"
            size={24}
            color="#748c94"
            focused={focused}
          ></CustomTabBarIcon>
        ),
      }}
    />
  </BottomTab.Navigator>
);
const SearchHeader = ({ navigation }) => {
    const handleGoBack = () => {
      navigation.goBack();
    };

    return (
      <View style={{ flexDirection: "row", alignItems: "center" }}>
        <TouchableOpacity onPress={handleGoBack}>
          <FontAwesome
            name="arrow-left"
            size={24}
            color="#f97316"
            style={{ marginLeft: 15 }}
          />
        </TouchableOpacity>
        <View style={{ flex: 1 }}>
          <AutocompleteSearchBar />
        </View>
      </View>
    );
  };
export default function App() {
   const [loading, setLoading] = useState(true);

   useEffect(() => {
     // Simulate an initial loading period
     const loadingTimeout = setTimeout(() => {
       setLoading(false);
     }, 7000);

     // Cleanup the timeout to avoid memory leaks
     return () => clearTimeout(loadingTimeout);
   }, []);

  if (loading) {
    return (
      <View style={{ flex: 1, justifyContent: "center", alignItems: "center" }}>        
        <Image
          source={require("./assets/QSQD.gif")}
          style={{ width: 200, height: 200 }}
        />  
      </View>
    );
  }
  
  return (
    <NavigationContainer>
      <Stack.Navigator initialRouteName="Main">
        <Stack.Screen
          name="Main"
          component={MainTabNavigator}
          options={{
            header: () => <HeadrBar />,
          }}
        />
        <Stack.Screen name="Cart" component={Cart} />
        <Stack.Screen name="Wishlist" component={Wishlist} />
        <Stack.Screen name="ProductDetails" component={ProductDetails} />
        <Stack.Screen
          name="AutocompleteSearchBar"          
          component={AutocompleteSearchBar}
          options={{
            header: () => <SearchHeader />,
          }}
        />
      </Stack.Navigator>
    </NavigationContainer>
  );
}
-----------
import { View, TextInput, TouchableOpacity, Text } from "react-native";
import React,{useState,useEffect} from "react";
import { FontAwesome } from "@expo/vector-icons";
import { useNavigation } from "@react-navigation/native";
import { v4 as uuidv4 } from "uuid";
import AsyncStorage from "@react-native-async-storage/async-storage";
import "react-native-get-random-values";
import AutocompleteSearchBar from "./AutocompleteSearchBar";
const HeadrBar = () => {
     const [uuid, setUuid] = useState("");
      const [cart, setCart] = useState([]);
      const [wishlist, setWishlist] = useState([]);
   useEffect(() => {    
     const getStoredUuid = async () => {
       try {
         const storedUuid = await AsyncStorage.getItem("deviceUuid");
         if (storedUuid) {
           setUuid(storedUuid);
         } else {
           const newUuid = uuidv4();
           setUuid(newUuid);
           await AsyncStorage.setItem("deviceUuid", newUuid);
         }
       } catch (error) {
         console.error("Error accessing AsyncStorage:", error);
       }
     };

     getStoredUuid();
   }, []);

  const navigation = useNavigation();
const searchIpit = () => {
  return (
    <View>
      <Text>Search</Text>
    </View>
  );
};
  const navigateToCart = () => {
    navigation.navigate("Cart");
  };
  const navigateToSearch = () => {
    navigation.navigate("AutocompleteSearchBar");
  };
  const navigateToWishlist = () => {
    navigation.navigate("Wishlist");
  };

  // Sample numbers (replace with your actual numbers)
  
 
  const fetchData = async () => {
    const response = await fetch(
      `https://bachen-eco.onrender.com/api/shoppingCart/${uuid}`
    );

    const data = await response.json();
    const hasNullItem = data.some((cartItem) =>
      cartItem.items.some((item) => item.item_id === null)
    );

    if (hasNullItem) {
      setCart([]);
    } else {
      setCart(data);
    }
    setLoading(false);
  };
  const fetchDataw = async () => {
    const response = await fetch(
      `https://bachen-eco.onrender.com/api/wishlist/${uuid}`
    );

    const data = await response.json();
    const hasNullItem = data.some((cartItem) =>
      cartItem.items.some((item) => item.item_id === null)
    );

    if (hasNullItem) {
      setWishlist([]);
    } else {
      setWishlist(data);
    }   
  };
  useEffect(() => {
    fetchData();
  }, [uuid]);
  useEffect(() => {
    fetchDataw();
  }
  , [uuid]);
 const cartItemCount = cart.length > 0
  const wishlistItemCount = wishlist.length > 0
  return (
    <View className="flex-row  justify-between   items-center p-2 mt-7 mb-[-30px]">    
    
        <View className="flex-1 flex-row justify-end items-end mr-2">
          <TouchableOpacity onPress={navigateToSearch}><FontAwesome
          name="search"          
          size={34}
          color="#f97316"
        />              
      </TouchableOpacity>
        <TouchableOpacity onPress={navigateToCart}>
          <FontAwesome name="shopping-cart" size={35} color="#f97316" />
          {cartItemCount > 0 && (
            <View
              style={{
                position: "absolute",
                top: -3,
                right: -3,
                backgroundColor: "#6ee7b7",
                borderRadius: 10,
                width: 20,
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <Text style={{ color: "black" }}>
                {cart.length > 0
                  ? cart.reduce(
                      (total, cartItem) =>
                        total +
                        cartItem.items.reduce(
                          (itemTotal, item) => itemTotal + item.quantity,
                          0
                        ),
                      0
                    )
                  : 0}
              </Text>
            </View>
          )}
        </TouchableOpacity>
        <TouchableOpacity onPress={navigateToWishlist}>
          <FontAwesome
            name="heart"
            size={35}
            color="#f97316"
            style={{ marginLeft: 15 }}
          />
          {wishlistItemCount > 0 && (
            <View
              style={{
                position: "absolute",
                top: -3,
                right: -3,
                backgroundColor: "#6ee7b7",
                borderRadius: 10,
                width: 20,
                justifyContent: "center",
                alignItems: "center",
              }}
            >
              <Text style={{ color: "black" }}>
                {wishlist.length > 0
                  ? wishlist.reduce(
                      (total, wishlistItem) =>
                        total +
                        wishlistItem.items.reduce(
                          (itemTotal, item) => itemTotal + item.quantity,
                          0
                        ),
                      0
                    )
                  : 0}
              </Text>
            </View>
          )}
        </TouchableOpacity>
      </View>
    </View>
  );
};

export default HeadrBar;
----------------------------------------------------------------------
import { StatusBar } from "expo-status-bar";
import {
  View,
  Text,
  TextInput,
  TouchableOpacity,
  StyleSheet,
  ImageBackground,
} from "react-native";
import { ClerkProvider, SignedIn, SignedOut } from "@clerk/clerk-expo";
import SignUpScreen from "./SignUpScreen";
import SignInScreen from "./SignInScreen";
import SignInWithOAuth from "./SignInWithOAuth";
import * as SecureStore from "expo-secure-store";
import UseAuthExample from "./UseAuthExample";
import SignOut from "./SignOut";

export default function Login() {
  const tokenCache = {
    getToken(key) {
      try {
        return SecureStore.getItemAsync(key);
      } catch (err) {
        return null;
      }
    },
    saveToken(key, value) {
      try {
        return SecureStore.setItemAsync(key, value);
      } catch (err) {
        return null;
      }
    },
  };

  return (
    // <ClerkProvider
    //   tokenCache={tokenCache}
    //   publishableKey={"pk_test_c2tpbGxlZC1nbnUtODMuY2xlcmsuYWNjb3VudHMuZGV2JA"}
    // >
    //   <SafeAreaView style={styles.container}>
    //     <SignedIn>
    //       <Text>You are Signed in</Text>
    //       <UseAuthExample />
    //       <SignOut />
    //     </SignedIn>
    //     <SignedOut>
    //       <SignInWithOAuth />
    //       <SignUpScreen />
    //       <SignInScreen />
    //     </SignedOut>
    //   </SafeAreaView>
    // </ClerkProvider>

    <ImageBackground
      source={{
        uri: "https://img.freepik.com/free-vector/technology-background_23-2148119855.jpg?w=2000&t=st=1689179372~exp=1689179972~hmac=8a67af351443807b8728d4c2e1b067ba4a54be7b07c038cac30bdb71291062c1",
      }}
      style={styles.backgroundImage}
    >
      <View style={styles.container}>
        <View style={styles.formContainer}>
          <View style={styles.inputGroup}>
            <TextInput
              style={styles.input}
              placeholder="Username"
              placeholderTextColor="white"
            />
          </View>

          <View style={styles.inputGroup}>
            <TextInput
              style={styles.input}
              placeholder="Password"
              placeholderTextColor="white"
              secureTextEntry
            />
          </View>

          <TouchableOpacity style={styles.loginButton}>
            <Text style={styles.loginButtonText}>Login</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.forgotPassword}>
            <Text style={styles.forgotPasswordText}>Forgot password?</Text>
          </TouchableOpacity>
        </View>

        <View style={styles.signUpLink}>
          <Text style={styles.signUpText}>
            Don't have an account?{" "}
            <Text style={styles.signUpLinkText}>Sign up</Text>
          </Text>
        </View>

        <View style={styles.socialButtonsContainer}>
          <TouchableOpacity style={styles.socialButton}>
            <Text style={styles.socialButtonText}>Twitter</Text>
          </TouchableOpacity>

          <TouchableOpacity style={styles.socialButton}>
            <Text style={styles.socialButtonText}>Github</Text>
          </TouchableOpacity>
        </View>
      </View>
    </ImageBackground>
  );
}

const styles = StyleSheet.create({
  backgroundImage: {
    flex: 1,
    resizeMode: "cover",
    justifyContent: "center",
    marginTop: 26,
  },
  container: {
    flex: 1,
    alignItems: "center",
    justifyContent: "center",
  },
  formContainer: {
    backgroundColor: "rgba(255, 255, 255, 0.2)",
    borderRadius: 20,
    padding: 20,
    width: 300,
  },
  inputGroup: {
    marginVertical: 10,
  },
  input: {
    height: 40,
    backgroundColor: "rgba(255, 255, 255, 0.7)",
    borderRadius: 20,
    padding: 10,
    color: "white",
  },
  loginButton: {
    backgroundColor: "#2196F3",
    borderRadius: 20,
    height: 40,
    alignItems: "center",
    justifyContent: "center",
    marginVertical: 10,
  },
  loginButtonText: {
    color: "white",
    fontWeight: "bold",
  },
  forgotPassword: {
    alignItems: "center",
  },
  forgotPasswordText: {
    color: "white",
  },
  signUpLink: {
    marginTop: 20,
    flexDirection: "row",
    alignItems: "center",
    justifyContent: "center",
  },
  signUpText: {
    color: "white",
  },
  signUpLinkText: {
    fontWeight: "bold",
    color: "#2196F3",
  },
  socialButtonsContainer: {
    marginTop: 20,
    flexDirection: "row",
    justifyContent: "space-between",
    width: 320,
  },
  socialButton: {
    borderWidth: 1,
    borderColor: "white",
    borderRadius: 20,
    height: 40,
    alignItems: "center",
    justifyContent: "center",
    width: 150,
  },
  socialButtonText: {
    color: "white",
    fontWeight: "bold",
  },
});
